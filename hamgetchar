; DO AN VI XU LY (2014)
; Date: 05/2014
; Author: Mark Stevens
;
;



%include "linux/asm_io.inc"


segment .data
hex db "01",0
len equ $-hex
result dd 0
final db "Ket qua chuyen doi tu hex -> demical: ",0

segment .bss
char resb 100
returnpow resd 1


extern printf
segment .text
global asm_main
asm_main:
enter 0,0
pusha
;
;Doan nay de get hex digit
;
mov dword [returnpow],1

mov ebx,0
lop:
call read_char
mov ecx,len

compare:
cmp al,[hex+ecx-1]
je good			; neu thuoc hex thi gan vao mang char
loop compare
cmp ecx,0		; neu ko phai hex thi in so. 
je in

good:
mov [char +ebx],al
dump_regs 1
inc ebx
jmp lop
;
;
;
;
in:
mov ecx,ebx
dec ebx		
mov edx,0	 
lac:
xor eax,eax
mov al,[char+ebx]
dump_regs 2
push returnpow	; address
push 2	;	; value
push edx	; value	
call pow	; CALL POW FUNCTION
add esp,12
dec ebx
inc edx
push result	; adress of result, it is sum of returnpow x element char/ 
push returnpow	; address
push eax	; value
call multi	; CALL MULTI FUNCTION
add esp,12
mov eax,[result]
loop lac
;
; Display final result
;
mov edx,eax
mov eax,final
call print_string
mov eax,edx
call print_int

call print_nl
mov eax,0
leave
ret
;
;-------------------------------------------------------------------------------------------
;
;	POW FUNCTION
;

segment .text
;
;	Pow, [ebp+16]: address of result
;	     [ebp+12]: VALUE, he so (16)
;	     [ebp+8]:  VALUE, so mu

pow:			; 
enter 0,0
pusha

;
; Doan nay de pow
;

mov eax,1
mov ecx,[ebp+12]
mov ebx,[ebp+8]
cmp ebx,0
jz ketqua
;
;	Doan nay de tinh pow
;
lep:
mul ecx
dec ebx
cmp ebx,0
jz ketqua
jmp lep
;
;  	Doan nay de in ket qua
;
ketqua:
mov ebx,[ebp+16]	; address of returnpow
mov [ebx],eax

popa
leave
ret
;
;-------------------------------------------------------------------------------------------------------------
;
;		MULTI FUNCTION
;	Ham nay nhan pow voi so.
;
;
segment .text
multi:
;
; Can co 2 argument de nhan voi nhau, ok 
;-> eax [ebp+8], address of returnpow [ebp+12]
;
enter 0,0
pusha


mov ebx,[ebp+12]
mov eax,[ebx]
mov ecx,[ebp+8]
cmp ecx,0x39
jng doi
sub ecx,0x41
add ecx,0xa
jmp tinh
doi:
sub ecx,0x30


tinh:
mul ecx
mov ebx,[ebp+16]	; address of result
add [ebx],eax

popa
leave
ret
